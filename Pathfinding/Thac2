local PathFindingService = game:GetService("PathfindingService")
local TweenService = game:GetService("TweenService")

local Path = {}
Path.__index = Path

local AgentRadius1, AgentHeight1, AgentCanJump1 = 5, 10, true
local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0)

function OnPathBlocked(blockedWaypointIndex, Target, Endpoint, CurrentWaypointIndex)
	pcall(function()
		if blockedWaypointIndex > CurrentWaypointIndex then
			local path = Path.new(Target, Endpoint)
			path:Move()
		end
	end)
end

function onWaypointReached(Reached, self, Target, Index, Waypoints)
	local humanoid = Target:FindFirstChildOfClass("Humanoid")

	if Reached and Index < #Waypoints then
		self:IncreaseIndex(1)
		Index = Index + 1
		
		humanoid:MoveTo(Waypoints[Index].Position)
		
		if Waypoints[Index + 1] == nil then
			if self["Finished"] and typeof(self["Finished"]) == "function" then
				self["Finished"]()
			end
		end
	end
end

function Path.CalculateTimeRaw(Target, End)
    if Target:FindFirstChildOfClass("Humanoid") then
        local Humanoid = Target:FindFirstChildOfClass("Humanoid")
        local Root = Target:FindFirstChild("HumanoidRootPart")
        local EndPosition

        if typeof(End) == "Instance" then
            if End:IsA("Model") then
                EndPosition = getModelPosition(End)
            else
                EndPosition = End.Position
            end
        elseif typeof(End) == "Vector3" then
            EndPosition = End
        else
            warn("Invalid endpoint type.")
            return 0
        end

        local Magnitude = (Root.Position - EndPosition).Magnitude
        local Calculation = Magnitude / Humanoid.WalkSpeed

        return Calculation
    end
end

function Path:CalculateTime()
    local Data = self
    local Target = Data["Target"]
    local End = Data["Endpoint"]
    local EndPosition

    if Target:FindFirstChildOfClass("Humanoid") then
        local Humanoid = Target:FindFirstChildOfClass("Humanoid")
        local Root = Target:FindFirstChild("HumanoidRootPart")

        if typeof(End) == "Instance" then
            if End:IsA("Model") then
                EndPosition = getModelPosition(End)
            else
                EndPosition = End.Position
            end
        elseif typeof(End) == "Vector3" then
            EndPosition = End
        else
            warn("Invalid endpoint type.")
            return 0
        end

        local Magnitude = (Root.Position - EndPosition).Magnitude
        local Calculation = Magnitude / Humanoid.WalkSpeed

        return Calculation
    end
end

local function getModelPosition(model)
    if model:IsA("Model") then
        local primaryPart = model.PrimaryPart
        if primaryPart then
            return primaryPart.Position
        else
            local totalPosition = Vector3.new(0, 0, 0)
            local partCount = 0
            for _, part in ipairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    totalPosition = totalPosition + part.Position
                    partCount = partCount + 1
                end
            end
            if partCount > 0 then
                return totalPosition / partCount
            else
                warn("Model has no parts to calculate position.")
            end
        end
    else
        warn("The provided endpoint is not a Model.")
    end
end

function Path:IncreaseIndex(amount)
	self["CurrentWaypointIndex"] += amount
end

function Path:ResetIndex()
	self["CurrentWaypointIndex"] = 1
end

function Path:DecreaseIndex(amount)
	self["CurrentWaypointIndex"] -= amount
end

function ArrayNext(Target, Array, Index)
	Index = Index + 1
	
	if Array[Index] then
		local value = Array[Index]
		
		repeat
			local NewPath = Path.new(Target, Array[Index])
			NewPath:Play()
			Index = Index + 1
		until Array[Index] == nil
		
		return true
	else
		return false
	end
end

function Path:CheckFor(name, callback)
	self[name] = callback
end

function Path.new(Target, Endpoint)
    local params = {AgentRadius = AgentRadius1, AgentHeight = AgentHeight1, AgentCanJump = AgentCanJump1}
    local path = PathFindingService:CreatePath(params)
    
    local self = {
        ["Target"] = Target;
        ["Time"] = Path.CalculateTimeRaw(Target, Endpoint);
        ["Endpoint"] = Endpoint;
        ["CurrentWaypointIndex"] = 1;
        ["Walkspeed"] = 16;
        ["JumpPower"] = 100;
    };
    
    local endpointPosition
    if typeof(Endpoint) == "Instance" then
        if Endpoint:IsA("Model") then
            endpointPosition = getModelPosition(Endpoint)
        else
            endpointPosition = Endpoint.Position
        end
    elseif typeof(Endpoint) == "Vector3" then
        endpointPosition = Endpoint
    else
        warn("Invalid endpoint type.")
    end

    if Target then
        self["Path"] = path
        
        if Target:FindFirstChildOfClass("Humanoid") then
            self["Humanoid"] = Target:FindFirstChildOfClass("Humanoid")
            
            local RootPart = Target:WaitForChild("HumanoidRootPart")
            
            path:ComputeAsync(RootPart.Position, endpointPosition)
            path.Blocked:Connect(function(blockedWaypointIndex)
                OnPathBlocked(blockedWaypointIndex, Target, Endpoint, self["CurrentWaypointIndex"])
            end)
            
            self["Humanoid"].MoveToFinished:Connect(function(status)
                onWaypointReached(status, self, Target, self["CurrentWaypointIndex"], path:GetWaypoints())
            end)
        else
            path:ComputeAsync(Target.Position, endpointPosition)
            
            self["TweenPause"] = false
            self["TweenStop"] = false
        end
    end
    
    return setmetatable(self, Path)
end

function Path:Play()
	local Data = self
	local Path2 = Data["Path"]
	local Target = Data["Target"]
	local Humanoid = Data["Humanoid"]
	local CurrentWaypointIndex = Data["CurrentWaypointIndex"]
	
	local Waypoints = Path2:GetWaypoints()
	
	if Path2 then
		if Humanoid then
			if Path2.Status == Enum.PathStatus.Success then
				if Waypoints[CurrentWaypointIndex] then
					local pos = Waypoints[CurrentWaypointIndex].Position
					
					Humanoid:MoveTo(pos)
					Humanoid.MoveToFinished:Wait()
					
					if Path["WaypointReached"] and typeof(Path["WaypointReached"]) == "function" then
						Path["WaypointReached"]()
					end
				end
			end
		else
			local TweenIndex = 1
			local Continue = true

			for i,v in pairs(Waypoints) do
				local TweenPause = self["TweenPause"]
				local TweenStop = self["TweenStop"]
				
				if Continue == true then
					if TweenStop == true then
						Continue = false
					end
					
					if v then
						local Tween = TweenService:Create(Target, tweenInfo, {Position = v.Position})
						Tween:Play()
						TweenIndex = TweenIndex + 1

						if TweenPause == true then
							Tween:Pause()
							
							repeat
								wait()
							until self["TweenPause"] == false
							
							Tween:Play()
						end
						
						Tween.Completed:Wait()
						
						if Path["WaypointReached"] and typeof(Path["WaypointReached"]) == "function" then
							Path["WaypointReached"]()
						end
					else
						if Path["Finished"] and typeof(Path["Finished"]) == "function" then
							Path["Finished"]()
						end
						
						return
					end
				end
			end
		end
	end
end

function Path:Pause()
	local Data = self
	local Target = Data["Target"]
	local Humanoid = Data["Humanoid"]
	
	if Humanoid then
		local Root = Target:FindFirstChild("HumanoidRootPart")
		Root.Anchored = true
	else
		self["TweenPause"] = true
	end
end

function Path:Resume()
	local Data = self
	local Target = Data["Target"]
	local Humanoid = Data["Humanoid"]

	if Humanoid then
		local Root = Target:FindFirstChild("HumanoidRootPart")
		Root.Anchored = false
	else
		self["TweenPause"] = false
	end
end

function Path:Destroy()
	local Data = self
	local Target = Data["Target"]
	
	if Target:FindFirstChildOfClass("Humanoid") then
		local Humanoid = Data["Humanoid"]
		local Root = Target:FindFirstChild("HumanoidRootPart")
		
		Humanoid:MoveTo(Root.Position)
	else
		Data["TweenStop"] = true
	end
end

function Path:ArrayMovement()
	local Data = self
	local Target = Data["Target"]
	local End = Data["Endpoint"]
	local Humanoid = Data["Humanoid"]

	local ArrayIndex = 1
	
	if End[ArrayIndex] then
		local NewPath = Path.new(Target, End[ArrayIndex])
		NewPath:Play()
			
		local Finished = ArrayNext(Target, End, ArrayIndex)

		if Finished == true then
			return "Success"
		end
	end
end

function Path:Jump()
	local Data = self
	local Target = Data["Target"]
	local Humanoid = Data["Humanoid"]
	local JumpPower = Data["JumpPower"]
	
	if Target then
		if Humanoid then
			Humanoid:Jump()
		else
			self["TweenPause"] = true
			Target.Anchored = false
			Target.Velocity = Vector3.new(0, JumpPower, 0)
			wait(JumpPower/75)
			self["TweenPause"] = false
			Target.Anchored = true
		end
	end
end

function Path:SetSettings(Data, Type)
	local Target = self["Target"]
	local HasHumanoid = nil
	
	if Target:FindFirstChildOfClass("Humanoid") then
		HasHumanoid = Target:FindFirstChildOfClass("Humanoid")
	end
	
	if Type == "TweenInfo" then
		tweenInfo = Data
	elseif Type == "JumpPower" then
		self["JumpPower"] = Data;
		
		if HasHumanoid then
			HasHumanoid.JumpPower = Data;
		end
	elseif Type == "WalkSpeed" then
		self["WalkSpeed"] = Data;
		
		if HasHumanoid then
			HasHumanoid.WalkSpeed = Data;
		end
	end
end

return Path
