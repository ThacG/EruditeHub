local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local EruditeESP = {}

EruditeESP.Settings = {
    TextColour = Color3.fromRGB(255, 255, 255),
    VisualColour = Color3.fromRGB(255, 0, 0),
    TextSize = 16,
    ShowOutline = true,
    ShowChams = true,
    ShowName = true,
    ShowDistance = true,
    ShowHealth = true,
    ShowTracers = true,
    RemoveOnDeath = true,
    MaxDistance = 300,
    TeamColors = false,
    TeamBased = false,
}

local espObjects = {}

function EruditeESP:Init(settings)
    for k, v in pairs(settings) do
        if self.Settings[k] ~= nil then
            self.Settings[k] = v
        end
    end
end

local function Draw(Type, Properties)
    local Object = Drawing.new(Type)
    for Property, Value in pairs(Properties or {}) do
        Object[Property] = Value
    end
    return Object
end

local function GetScreenPosition(Position)
    local ScreenPos, IsOnScreen = workspace.CurrentCamera:WorldToViewportPoint(Position)
    return Vector2.new(ScreenPos.X, ScreenPos.Y), IsOnScreen
end

local function GetDistance(Position)
    local character = Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local charPos = character.HumanoidRootPart.Position
        local magnitude = (charPos - Position).Magnitude
        return math.floor(magnitude * 0.28) -- Converts studs to meters and rounds down
    end
    return 0
end

local function GetTeamColor(Model)
    local Player = Players:GetPlayerFromCharacter(Model)
    return Player and Player.Team and Player.Team.TeamColor.Color or Color3.new(1, 0, 0)
end

local function IsHostile(Model)
    local Player = Players:GetPlayerFromCharacter(Model)
    local MyTeam = Players.LocalPlayer.Team
    local TheirTeam = Player and Player.Team or nil
    return MyTeam ~= TheirTeam
end

local function CreateESP(Model)
    if not Model then return end

    local text = Draw("Text", {
        Color = EruditeESP.Settings.TextColour,
        Size = EruditeESP.Settings.TextSize,
        Center = true,
        Outline = true,
        OutlineColor = Color3.new(0, 0, 0),
    })

    local tracer = Draw("Line", {
        Color = EruditeESP.Settings.VisualColour,
        Thickness = 1,
    })

    espObjects[Model] = {
        Text = text,
        Tracer = tracer,
    }

    local function update()
        if not EruditeESP.Enabled then
            text.Visible = false
            tracer.Visible = false
            return
        end

        if Model and Model.Parent then
            local itemPos = Model:IsA("BasePart") and Model.Position or Model.PrimaryPart and Model.PrimaryPart.Position
            if itemPos then
                local screenPos, onScreen = GetScreenPosition(itemPos)
                if onScreen then
                    local distance = GetDistance(itemPos)
                    if distance > EruditeESP.Settings.MaxDistance then
                        text.Visible = false
                        tracer.Visible = false
                        return
                    end
                    local displayText = Model.Name
                    if EruditeESP.Settings.ShowDistance then
                        displayText = displayText .. string.format("\n%d meters", distance)
                    end
                    if EruditeESP.Settings.ShowHealth and Model:FindFirstChild("Humanoid") then
                        local health = math.ceil(Model.Humanoid.Health)
                        displayText = displayText .. string.format("\nHealth: %d", health)
                    end
                    text.Text = displayText
                    text.Position = screenPos
                    text.Visible = true

                    if EruditeESP.Settings.ShowTracers then
                        tracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                        tracer.To = screenPos
                        tracer.Visible = true
                    end

                    if EruditeESP.Settings.ShowChams then
                        for _, part in ipairs(Model:GetDescendants()) do
                            if part:IsA("BasePart") then
                                part.Material = Enum.Material.ForceField
                                part.Color = EruditeESP.Settings.VisualColour
                                part.Transparency = 0.5
                            end
                        end
                    end
                    if EruditeESP.Settings.ShowOutline then
                        for _, part in ipairs(Model:GetDescendants()) do
                            if part:IsA("BasePart") then
                                local outlinePart = Instance.new("SelectionBox", part)
                                outlinePart.Adornee = part
                                outlinePart.LineThickness = 0.05
                                outlinePart.Color3 = EruditeESP.Settings.VisualColour
                            end
                        end
                    end
                else
                    text.Visible = false
                    tracer.Visible = false
                end
            else
                text.Visible = false
                tracer.Visible = false
            end
        else
            text.Visible = false
            tracer.Visible = false
        end
    end

    RunService.Heartbeat:Connect(update)
end

local function RemoveESP(Model)
    if espObjects[Model] then
        espObjects[Model].Text:Remove()
        espObjects[Model].Tracer:Remove()
        espObjects[Model] = nil
    end
end

function EruditeESP:InitializeESP(container)
    for _, item in ipairs(container:GetChildren()) do
        CreateESP(item)
    end

    container.ChildAdded:Connect(function(item)
        CreateESP(item)
    end)

    container.ChildRemoved:Connect(function(item)
        RemoveESP(item)
    end)
end

function EruditeESP:InitializePlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            self:InitializePlayer(player)
        end
    end

    Players.PlayerAdded:Connect(function(player)
        if player ~= Players.LocalPlayer then
            self:InitializePlayer(player)
        end
    end)

    Players.PlayerRemoving:Connect(function(player)
        RemoveESP(player.Character)
    end)
end

function EruditeESP:InitializePlayer(player)
    player.CharacterAdded:Connect(function(character)
        CreateESP(character)
        if self.Settings.RemoveOnDeath then
            character:WaitForChild("Humanoid").Died:Connect(function()
                RemoveESP(character)
            end)
        end
    end)

    if player.Character then
        CreateESP(player.Character)
        if self.Settings.RemoveOnDeath then
            player.Character:WaitForChild("Humanoid").Died:Connect(function()
                RemoveESP(player.Character)
            end)
        end
    end
end

return EruditeESP
