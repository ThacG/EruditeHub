local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local EruditeESP = {
    Enabled = true,
    Settings = {
        RemoveOnDeath = true,
        MaxDistance = 300, -- Max Distance for ESP to render (in meters)
        TeamColors = false, -- Whether or not the ESP color is based on team colors
        TeamBased = false, -- Whether or not the ESP should render ESP on teammates

        Boxes = {
            Enabled = true,
            Color = Color3.new(1, 0, 1),
            Thickness = 1,
        },
        Names = {
            Distance = true,
            Health = true, -- Adds health values to the nametag
            Enabled = true,
            Resize = true, -- Resizes the text based on the distance from the camera to the player
            ResizeWeight = 0.05, -- How quickly names are resized based on the distance from the camera
            Color = Color3.new(1, 1, 1),
            Size = 18,
            Font = 1,
            Center = true,
            Outline = true,
        },
        Tracers = {
            Enabled = true,
            Thickness = 1,
            Color = Color3.new(1, 0, 1),
        }
    },
    Objects = {} -- Table of ESP objects
}

local function Draw(Type, Properties)
    local Object = Drawing.new(Type)
    for Property, Value in pairs(Properties or {}) do
        Object[Property] = Value
    end
    return Object
end

local function GetScreenPosition(Position)
    local ScreenPos, IsOnScreen = workspace.CurrentCamera:WorldToViewportPoint(Position)
    return Vector2.new(ScreenPos.X, ScreenPos.Y), IsOnScreen
end

local function GetDistance(Position)
    local character = Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local charPos = character.HumanoidRootPart.Position
        local magnitude = (charPos - Position).Magnitude
        return math.floor(magnitude * 0.28) -- Converts studs to meters and rounds down
    end
    return 0
end

local function GetTeamColor(Model)
    local Player = Players:GetPlayerFromCharacter(Model)
    return Player and Player.Team and Player.Team.TeamColor.Color or Color3.new(1, 0, 0)
end

local function IsHostile(Model)
    local Player = Players:GetPlayerFromCharacter(Model)
    local MyTeam = Players.LocalPlayer.Team
    local TheirTeam = Player and Player.Team or nil
    return MyTeam ~= TheirTeam
end

local function CreateESP(Model)
    if not Model then return end

    local text = Draw("Text", {
        Color = EruditeESP.Settings.Names.Color,
        Size = EruditeESP.Settings.Names.Size,
        Center = EruditeESP.Settings.Names.Center,
        Outline = EruditeESP.Settings.Names.Outline,
        OutlineColor = Color3.new(0, 0, 0),
    })

    local tracer = Draw("Line", {
        Color = EruditeESP.Settings.Tracers.Color,
        Thickness = EruditeESP.Settings.Tracers.Thickness,
    })

    local box = Draw("Quad", {
        Color = EruditeESP.Settings.Boxes.Color,
        Thickness = EruditeESP.Settings.Boxes.Thickness,
    })

    espObjects[Model] = {
        Text = text,
        Tracer = tracer,
        Box = box,
    }

    local function update()
        if not EruditeESP.Enabled then
            text.Visible = false
            tracer.Visible = false
            box.Visible = false
            return
        end

        if Model and Model.Parent then
            local itemPos = Model:IsA("BasePart") and Model.Position or Model.PrimaryPart and Model.PrimaryPart.Position
            if itemPos then
                local screenPos, onScreen = GetScreenPosition(itemPos)
                if onScreen then
                    local distance = GetDistance(itemPos)
                    if distance > EruditeESP.Settings.MaxDistance then
                        text.Visible = false
                        tracer.Visible = false
                        box.Visible = false
                        return
                    end
                    local displayText = Model.Name
                    if EruditeESP.Settings.Names.Distance then
                        displayText = displayText .. string.format("\n%d meters", distance)
                    end
                    if EruditeESP.Settings.Names.Health and Model:FindFirstChild("Humanoid") then
                        local health = math.ceil(Model.Humanoid.Health)
                        displayText = displayText .. string.format("\nHealth: %d", health)
                    end
                    text.Text = displayText
                    text.Position = screenPos
                    text.Visible = true

                    if EruditeESP.Settings.Tracers.Enabled then
                        tracer.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y)
                        tracer.To = screenPos
                        tracer.Visible = true
                    end

                    if EruditeESP.Settings.Boxes.Enabled then
                        -- Calculate box corners based on screenPos and size
                        local boxSize = Vector2.new(50, 100) -- Example size, you might calculate this based on the model size
                        box.PointA = screenPos - boxSize / 2
                        box.PointB = screenPos + Vector2.new(boxSize.X / 2, -boxSize.Y / 2)
                        box.PointC = screenPos + boxSize / 2
                        box.PointD = screenPos + Vector2.new(-boxSize.X / 2, boxSize.Y / 2)
                        box.Visible = true
                    end
                else
                    text.Visible = false
                    tracer.Visible = false
                    box.Visible = false
                end
            else
                text.Visible = false
                tracer.Visible = false
                box.Visible = false
            end
        else
            text.Visible = false
            tracer.Visible = false
            box.Visible = false
        end
    end

    RunService.Stepped:Connect(update)
end

local function RemoveESP(Model)
    if espObjects[Model] then
        espObjects[Model].Text:Remove()
        espObjects[Model].Tracer:Remove()
        espObjects[Model].Box:Remove()
        espObjects[Model] = nil
    end
end

function EruditeESP:InitializeESP(container)
    for _, item in ipairs(container:GetChildren()) do
        CreateESP(item)
    end

    container.ChildAdded:Connect(function(item)
        CreateESP(item)
    end)

    container.ChildRemoved:Connect(function(item)
        RemoveESP(item)
    end)
end

function EruditeESP:InitializePlayers()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            self:InitializePlayer(player)
        end
    end

    Players.PlayerAdded:Connect(function(player)
        if player ~= Players.LocalPlayer then
            self:InitializePlayer(player)
        end
    end)

    Players.PlayerRemoving:Connect(function(player)
        RemoveESP(player.Character)
    end)
end

function EruditeESP:InitializePlayer(player)
    player.CharacterAdded:Connect(function(character)
        CreateESP(character)
        if self.Settings.RemoveOnDeath then
            character:WaitForChild("Humanoid").Died:Connect(function()
                RemoveESP(character)
            end)
        end
    end)

    if player.Character then
        CreateESP(player.Character)
        if self.Settings.RemoveOnDeath then
            player.Character:WaitForChild("Humanoid").Died:Connect(function()
                RemoveESP(player.Character)
            end)
        end
    end
end

return EruditeESP
